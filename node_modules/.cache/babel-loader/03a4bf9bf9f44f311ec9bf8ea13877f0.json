{"ast":null,"code":"var _jsxFileName = \"/Users/chinmaygopal/test/Motivate/src/Promises.js\",\n    _s = $RefreshSig$();\n\nimport { Box, Divider, Grid, GridItem, Heading, HStack, Tooltip, Spinner, Table, Thead, Tr, Th, Tbody, TagCloseButton, Tag, Button, useToast, Link } from \"@chakra-ui/react\";\nimport { useState, useEffect, useCallback } from \"react\";\nimport { FaInfoCircle } from \"react-icons/fa\";\nimport Web3 from \"web3\";\nimport abi from \"./abi.json\";\nimport { ExternalLinkIcon } from \"@chakra-ui/icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Promises(props) {\n  _s();\n\n  const web3 = new Web3(window.ethereum);\n  const toast = useToast();\n  const Contract = new web3.eth.Contract(abi, \"0x8E96E9B6bCB3DA7e7459f3115B4D4Ca364050429\");\n  const [promisesToFulfill, setPromisesToFulfill] = useState([]);\n  const [promisesToVerify, setPromisesToVerify] = useState([]);\n  const [isLoadingPromisesToFulfill, setIsLoadingPromisesToFulfill] = useState(true);\n  const [isLoadingPromisesToVerify, setIsLoadingPromisesToVerify] = useState(true);\n  const [isFulfillingPromise, setIsFulfillingPromise] = useState([]);\n  const getPromisesToFulfill = useCallback(async () => {\n    setIsLoadingPromisesToFulfill(true);\n    const result = await Contract.methods.getPendingPromises().call({\n      from: props.currentAccount\n    });\n    const promises = [];\n\n    for (const res of result) {\n      const promise = await Contract.methods.getPendingPromise(res).call();\n      promises.push(promise);\n    }\n\n    setPromisesToFulfill([...promises]);\n    setIsLoadingPromisesToFulfill(false);\n  }, [props.currentAccount]);\n  const getPromisesToVerify = useCallback(async () => {\n    setIsLoadingPromisesToVerify(true);\n    const result = await Contract.methods.getPromisesToBeFulfilled().call({\n      from: props.currentAccount\n    });\n    const promises = [];\n\n    for (const res of result) {\n      const promise = await Contract.methods.getPendingPromise(res).call();\n      promises.push(promise);\n    }\n\n    setPromisesToVerify([...promises]);\n    setIsLoadingPromisesToVerify(false);\n  }, [props.currentAccount]);\n\n  const fulfillPromise = id => {\n    setIsFulfillingPromise(prev => ({ ...prev,\n      [id]: true\n    }));\n    Contract.methods.fulfillPromise(id).send({\n      from: props.currentAccount\n    }).on(\"transactionHash\", hash => {\n      var link = \"\";\n      link = `https://explorer-mainnet.maticvigil.com/tx/${hash}`;\n      toast({\n        position: \"bottom-right\",\n        render: () => /*#__PURE__*/_jsxDEV(Box, {\n          color: \"white\",\n          borderRadius: 3,\n          p: 3,\n          bg: \"blue.400\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            isExternal: true,\n            href: link,\n            style: {\n              cursor: \"pointer\"\n            },\n            children: [\"View Transaction \", /*#__PURE__*/_jsxDEV(ExternalLinkIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 46\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this)\n      });\n    }).on(\"receipt\", receipt => {\n      console.log(receipt);\n      setIsFulfillingPromise(prev => ({ ...prev,\n        [id]: false\n      }));\n      getPromisesToVerify();\n    }).on(\"error\", (err, receipt) => {\n      console.log(receipt);\n\n      if (err.code == 4001) {\n        toast({\n          position: \"bottom-right\",\n          title: \"User Denied Transaction\",\n          status: \"error\",\n          isClosable: true\n        });\n      } else {\n        var link = \"\";\n        link = `https://explorer-mainnet.maticvigil.com/tx/${receipt.transactionHash}`;\n        toast({\n          position: \"bottom-right\",\n          isClosable: true,\n          render: () => /*#__PURE__*/_jsxDEV(Box, {\n            color: \"white\",\n            borderRadius: 3,\n            p: 3,\n            bg: \"red.400\",\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              isExternal: true,\n              href: link,\n              style: {\n                cursor: \"pointer\"\n              },\n              children: [\"View Transaction \", /*#__PURE__*/_jsxDEV(ExternalLinkIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 50\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 25\n          }, this)\n        });\n      }\n\n      setIsFulfillingPromise(prev => ({ ...prev,\n        [id]: false\n      }));\n    });\n  };\n\n  useEffect(() => {\n    console.log(props.chainId);\n    getPromisesToFulfill();\n    getPromisesToVerify();\n  }, [getPromisesToFulfill, getPromisesToVerify, props.chainId]);\n  var promiseComponents = [];\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    gap: 50,\n    px: \"40px\",\n    py: \"50px\",\n    marginTop: \"0px !important\",\n    templateColumns: \"repeat(2, 1fr)\",\n    children: [/*#__PURE__*/_jsxDEV(GridItem, {\n      children: [/*#__PURE__*/_jsxDEV(HStack, {\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          as: \"h2\",\n          size: \"lg\",\n          colorScheme: \"blue\",\n          children: \"Promises to Fulfill\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          hasArrow: true,\n          size: \"md\",\n          label: \"Tasks to be performed\",\n          placement: \"top\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: /*#__PURE__*/_jsxDEV(FaInfoCircle, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        m: 0,\n        mt: 3,\n        borderBottomWidth: 0,\n        opacity: \"1\",\n        borderTopWidth: 3,\n        borderColor: \"twitter.600\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), isLoadingPromisesToFulfill ? /*#__PURE__*/_jsxDEV(Spinner, {\n        alignSelf: \"center\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 50\n      }, this) : /*#__PURE__*/_jsxDEV(Table, {\n        children: [/*#__PURE__*/_jsxDEV(Thead, {\n          children: /*#__PURE__*/_jsxDEV(Tr, {\n            children: [/*#__PURE__*/_jsxDEV(Th, {\n              children: \"Promise Task\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Th, {\n              children: \"Deadline\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Tbody, {\n          children: promisesToFulfill.map(promise => {\n            return /*#__PURE__*/_jsxDEV(Tr, {\n              children: [/*#__PURE__*/_jsxDEV(Th, {\n                children: promise[\"promiseTask\"]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Th, {\n                children: /*#__PURE__*/_jsxDEV(Tag, {\n                  children: `${new Date(parseInt(promise[\"endTime\"]) * 1000).toDateString()} ${new Date(parseInt(promise[\"endTime\"]) * 1000).toLocaleTimeString()}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 133,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 41\n              }, this)]\n            }, promise[\"0\"], true, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 45\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n      children: [/*#__PURE__*/_jsxDEV(HStack, {\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          as: \"h2\",\n          size: \"lg\",\n          colorScheme: \"blue\",\n          children: \"Promises to Verify\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          hasArrow: true,\n          size: \"md\",\n          label: \"Tasks to be verified by you\",\n          placement: \"top\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: /*#__PURE__*/_jsxDEV(FaInfoCircle, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        m: 0,\n        mt: 3,\n        borderBottomWidth: 0,\n        opacity: \"1\",\n        borderTopWidth: 3,\n        borderColor: \"twitter.600\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this), isLoadingPromisesToVerify ? /*#__PURE__*/_jsxDEV(Spinner, {\n        alignSelf: \"center\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 49\n      }, this) : /*#__PURE__*/_jsxDEV(Table, {\n        children: [/*#__PURE__*/_jsxDEV(Thead, {\n          children: /*#__PURE__*/_jsxDEV(Tr, {\n            children: [/*#__PURE__*/_jsxDEV(Th, {\n              children: \"Promise Task\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Th, {\n              children: \"Deadline\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Th, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Tbody, {\n          children: promisesToVerify.map(promise => {\n            return /*#__PURE__*/_jsxDEV(Tr, {\n              children: [/*#__PURE__*/_jsxDEV(Th, {\n                children: promise[\"promiseTask\"]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Th, {\n                children: /*#__PURE__*/_jsxDEV(Tag, {\n                  children: `${new Date(parseInt(promise[\"endTime\"]) * 1000).toDateString()} ${new Date(parseInt(promise[\"endTime\"]) * 1000).toLocaleTimeString()}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 174,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Th, {\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  isLoading: isFulfillingPromise[promise[\"0\"]],\n                  onClick: () => fulfillPromise(promise[\"0\"]),\n                  color: \"green\",\n                  children: \"Fulfill\"\n                }, promise[\"0\"], false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 179,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 41\n              }, this)]\n            }, promise[\"0\"], true, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 45\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Promises, \"Me6owckgEGsXHBsUrVYAZ0rfOaI=\", false, function () {\n  return [useToast];\n});\n\n_c = Promises;\nexport default Promises;\n\nvar _c;\n\n$RefreshReg$(_c, \"Promises\");","map":{"version":3,"sources":["/Users/chinmaygopal/test/Motivate/src/Promises.js"],"names":["Box","Divider","Grid","GridItem","Heading","HStack","Tooltip","Spinner","Table","Thead","Tr","Th","Tbody","TagCloseButton","Tag","Button","useToast","Link","useState","useEffect","useCallback","FaInfoCircle","Web3","abi","ExternalLinkIcon","Promises","props","web3","window","ethereum","toast","Contract","eth","promisesToFulfill","setPromisesToFulfill","promisesToVerify","setPromisesToVerify","isLoadingPromisesToFulfill","setIsLoadingPromisesToFulfill","isLoadingPromisesToVerify","setIsLoadingPromisesToVerify","isFulfillingPromise","setIsFulfillingPromise","getPromisesToFulfill","result","methods","getPendingPromises","call","from","currentAccount","promises","res","promise","getPendingPromise","push","getPromisesToVerify","getPromisesToBeFulfilled","fulfillPromise","id","prev","send","on","hash","link","position","render","cursor","receipt","console","log","err","code","title","status","isClosable","transactionHash","chainId","promiseComponents","map","Date","parseInt","toDateString","toLocaleTimeString"],"mappings":"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","sourcesContent":["import { Box, Divider, Grid, GridItem, Heading, HStack, Tooltip, Spinner, Table, Thead, Tr, Th, Tbody, TagCloseButton, Tag, Button, useToast, Link } from \"@chakra-ui/react\";\nimport { useState, useEffect, useCallback } from \"react\";\nimport { FaInfoCircle } from \"react-icons/fa\";\nimport Web3 from \"web3\";\nimport abi from \"./abi.json\";\nimport { ExternalLinkIcon } from \"@chakra-ui/icons\";\n\nfunction Promises(props) {\n\n    const web3 = new Web3(window.ethereum);\n    const toast = useToast();\n    const Contract = new web3.eth.Contract(abi, \"0x8E96E9B6bCB3DA7e7459f3115B4D4Ca364050429\");\n    const [promisesToFulfill, setPromisesToFulfill] = useState([]);\n    const [promisesToVerify, setPromisesToVerify] = useState([]);\n    const [isLoadingPromisesToFulfill, setIsLoadingPromisesToFulfill] = useState(true);\n    const [isLoadingPromisesToVerify, setIsLoadingPromisesToVerify] = useState(true);\n    const [isFulfillingPromise, setIsFulfillingPromise] = useState([]);\n\n    const getPromisesToFulfill = useCallback(async () => {\n        setIsLoadingPromisesToFulfill(true);\n        const result = await Contract.methods.getPendingPromises().call({from: props.currentAccount});\n        const promises = [];\n        for(const res of result) {\n            const promise = await Contract.methods.getPendingPromise(res).call();\n            promises.push(promise);\n        }\n        setPromisesToFulfill([...promises]);\n        setIsLoadingPromisesToFulfill(false);\n    }, [props.currentAccount]);\n\n\n    const getPromisesToVerify = useCallback(async () => {\n        setIsLoadingPromisesToVerify(true);\n        const result = await Contract.methods.getPromisesToBeFulfilled().call({from: props.currentAccount});\n        const promises = [];\n        for(const res of result) {\n            const promise = await Contract.methods.getPendingPromise(res).call();\n            promises.push(promise);\n        }\n        setPromisesToVerify([...promises]);\n        setIsLoadingPromisesToVerify(false);\n    }, [props.currentAccount]);\n\n    const fulfillPromise = (id) => {\n        setIsFulfillingPromise(prev => ({...prev, [id]: true}));\n        Contract.methods.fulfillPromise(id).send({from: props.currentAccount})\n        .on(\"transactionHash\", (hash) => {\n            var link = \"\";\n            link = `https://explorer-mainnet.maticvigil.com/tx/${hash}`;\n            toast({\n                position: \"bottom-right\",\n                render: () => (\n                    <Box color=\"white\" borderRadius={3} p={3} bg=\"blue.400\">\n                        <Link isExternal href={link} style={{cursor: \"pointer\"}}>\n                            View Transaction <ExternalLinkIcon />\n                        </Link>\n                    </Box>\n                )\n            });\n        })\n        .on(\"receipt\", (receipt) => {\n            console.log(receipt);\n            setIsFulfillingPromise(prev => ({...prev, [id]: false}));\n            getPromisesToVerify();\n        })\n        .on(\"error\", (err, receipt) => {\n            console.log(receipt);\n            if(err.code == 4001) {\n                toast({\n                    position: \"bottom-right\",\n                    title: \"User Denied Transaction\",\n                    status: \"error\",\n                    isClosable: true\n                });\n            } else {\n                var link = \"\";\n                link = `https://explorer-mainnet.maticvigil.com/tx/${receipt.transactionHash}`;\n                toast({\n                    position: \"bottom-right\",\n                    isClosable: true,\n                    render: () => (\n                        <Box color=\"white\" borderRadius={3} p={3} bg=\"red.400\">\n                            <Link isExternal href={link} style={{cursor: \"pointer\"}}>\n                                View Transaction <ExternalLinkIcon />\n                            </Link>\n                        </Box>\n                    )\n                });\n            }\n            setIsFulfillingPromise(prev => ({...prev, [id]: false}));\n        });\n    }\n\n    useEffect(() => {\n        console.log(props.chainId);\n        getPromisesToFulfill();\n        getPromisesToVerify();\n    }, [getPromisesToFulfill, getPromisesToVerify, props.chainId])\n\n    var promiseComponents = [];\n\n    return (\n        <Grid gap={50} px=\"40px\" py=\"50px\" marginTop=\"0px !important\" templateColumns=\"repeat(2, 1fr)\">\n            <GridItem>\n                <HStack>\n                    <Heading as=\"h2\" size=\"lg\" colorScheme=\"blue\">\n                        Promises to Fulfill\n                    </Heading>\n                    <Tooltip hasArrow size=\"md\" label=\"Tasks to be performed\" placement=\"top\">\n                        <span>\n                            <FaInfoCircle />\n                        </span>\n                    </Tooltip>\n                </HStack>\n                <Divider m={0} mt={3} borderBottomWidth={0} opacity=\"1\" borderTopWidth={3} borderColor=\"twitter.600\"/>\n                {\n                    isLoadingPromisesToFulfill ? <Spinner alignSelf=\"center\" /> :\n                    <Table>\n                        <Thead>\n                            <Tr>\n                                <Th>Promise Task</Th>\n                                <Th>Deadline</Th>\n                            </Tr>\n                        </Thead>\n                        <Tbody>\n                            {\n                                promisesToFulfill.map((promise) => {\n                                    return (<Tr key={promise[\"0\"]}>\n                                        <Th>\n                                            {promise[\"promiseTask\"]}\n                                        </Th>\n                                        <Th>\n                                            <Tag>\n                                                {`${new Date(parseInt(promise[\"endTime\"]) * 1000).toDateString()} ${new Date(parseInt(promise[\"endTime\"]) * 1000).toLocaleTimeString()}`}\n                                            </Tag>\n                                        </Th>\n                                    </Tr>)\n                                })\n                            }\n                        </Tbody>\n                    </Table>\n                }\n            </GridItem>\n            <GridItem>\n                <HStack>\n                    <Heading as=\"h2\" size=\"lg\" colorScheme=\"blue\">\n                        Promises to Verify\n                    </Heading>\n                    <Tooltip hasArrow size=\"md\" label=\"Tasks to be verified by you\" placement=\"top\">\n                        <span>\n                            <FaInfoCircle />\n                        </span>\n                    </Tooltip>\n                </HStack>\n                <Divider m={0} mt={3} borderBottomWidth={0} opacity=\"1\" borderTopWidth={3} borderColor=\"twitter.600\"/>\n                {\n                    isLoadingPromisesToVerify ? <Spinner alignSelf=\"center\" /> :\n                    <Table>\n                        <Thead>\n                            <Tr>\n                                <Th>Promise Task</Th>\n                                <Th>Deadline</Th>\n                                <Th></Th>\n                            </Tr>\n                        </Thead>\n                        <Tbody>\n                            {\n                                promisesToVerify.map((promise) => {\n                                    return (<Tr key={promise[\"0\"]}>\n                                        <Th>\n                                            {promise[\"promiseTask\"]}\n                                        </Th>\n                                        <Th>\n                                            <Tag>\n                                                {`${new Date(parseInt(promise[\"endTime\"]) * 1000).toDateString()} ${new Date(parseInt(promise[\"endTime\"]) * 1000).toLocaleTimeString()}`}\n                                            </Tag>\n                                        </Th>\n                                        <Th>\n                                            <Button key={promise[\"0\"]} isLoading={isFulfillingPromise[promise[\"0\"]]}  onClick={() => fulfillPromise(promise[\"0\"])} color=\"green\">Fulfill</Button>\n                                        </Th>\n                                    </Tr>)\n                                })\n                            }\n                        </Tbody>\n                    </Table>\n                }\n            </GridItem>\n        </Grid>\n    );\n}\n\nexport default Promises;\n"]},"metadata":{},"sourceType":"module"}